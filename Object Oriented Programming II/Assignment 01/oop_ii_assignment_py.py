# -*- coding: utf-8 -*-
"""OOP II Assignment.py

Generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NB4m_x6Kj-xtHMRIsBXPX9EQoyQKpwr-
"""

# 1. Dictionary

def create_and_update_courses():
  # Create a dictionary to store courses
  courses = {
      "CSE101": {
          "Course name": "Introduction to Programming",
          "Credits": 3,
          "Instructor": "Dr. Alice"
      },
      "CSE102": {
          "Course name": "Data Structures",
          "Credits": 4,
          "Instructor": "Dr. Bob"
      },
      "CSE103": {
          "Course name": "Database Systems",
          "Credits": 3,
          "Instructor": "Dr. Carol"
      }
  }

  # Update the instructor's name for CSE102
  courses["CSE102"]["Instructor"] = "Dr. Bob Jr."

  # Add a new course
  courses["CSE104"] = {
      "Course name": "Algorithms",
      "Credits": 4,
      "Instructor": "Dr. Dave"
  }

  # Remove the course CSE101
  del courses["CSE101"]

  # Loop through the dictionary and print course details
  for course_code, course_details in courses.items():
      print(f"Course Code: {course_code}")
      print(f"Course Name: {course_details['Course name']}")
      print(f"Credits: {course_details['Credits']}")
      print(f"Instructor: {course_details['Instructor']}")
      print()

if __name__ == "__main__":
  create_and_update_courses()

# 2. String
def process_string():
    sentence = "Learning Python is fun and rewarding."

    # a. Extract the substring "Python is fun" using negative slicing
    substring = sentence[-28:-14]
    print(f"Extracted substring: {substring}")

    # b. Modify the original string by replacing "rewarding" with "exciting"
    modified_sentence = sentence.replace("rewarding", "exciting")
    print(f"Modified sentence: {modified_sentence}")

    # c. Insert " Keep practicing!" after "exciting"
    position = modified_sentence.find("exciting") + len("exciting")
    final_sentence = modified_sentence[:position] + " Keep practicing!" + modified_sentence[position:]
    print(f"Sentence after insertion: {final_sentence}")

    # d. Capitalize the first letter of each word in the final output
    capitalized_sentence = final_sentence.title()
    print(f"Capitalized final sentence: {capitalized_sentence}")

# Call the function to see the result
process_string()

#03. List

customers = ["Alice", "Bob", "Charlie", "David", "Eve"]

# a. Access the third customer in the list
print(customers[2])

# b. Change the name of the second customer to "Ben"
customers[1] = "Ben"

# c. Add a new customer named "Frank" to the end of the list
customers.append("Frank")

# d. Remove the customer "David" from the list
customers.remove("David")

# e. Sort the customer names alphabetically and print the final list
customers.sort()
print(customers)

# 04
grades = [85, 78, 92, 45, 33, 67, 88, 41]

# a. Categorize each student's grade
print("Grade Categories:")
for grade in grades:
    if grade > 80:
        print(f"Score: {grade} - Grade: A")
    elif grade >= 60:
        print(f"Score: {grade} - Grade: B")
    elif grade >= 40:
        print(f"Score: {grade} - Grade: C")
    else:
        print(f"Score: {grade} - Grade: F")

# b. Boost grades by 5%
def boost_grades(grade):
    return grade * 1.05

boosted_grades = list(map(boost_grades, grades))
print("\nBoosted Grades:")
print(boosted_grades)

# c. Find boosted grades above 90
above_90 = list(filter(lambda grade: grade > 90, boosted_grades))
print("\nBoosted Grades Above 90:")
print(above_90)

# Given Initial data
books = (
    ("To Kill a Mockingbird", "Harper Lee", 1960),
    ("1984", "George Orwell", 1949),
    ("The Great Gatsby", "F. Scott Fitzgerald", 1925)
)

tags = {"classic", "dystopian", "novel", "literature"}

# a. Access the second book's author from the books tuple...
print("The author of the second book is:", books[1][1])

# b. Add a new record for "Brave New World" by Aldous Huxley, published in 1932
# we need a new tuple with the new book added.
new_book = ("Brave New World", "Aldous Huxley", 1932)
books = books + (new_book,)  # Concatenate the new book as a tuple
print("\nUpdated books tuple:")
print(books)

# c. Unpack the details of the third book
title, author, year = books[2]
print("\nDetails of the third book:")
print(f"Title: {title}")
print(f"Author: {author}")
print(f"Year: {year}")

# d. Loop through the books tuple and print each book's title
print("\nBook Titles:")
for book in books:
    print(book[0])

# e. Add a new tag sci-fi
tags.add("sci-fi")
print("\nUpdated tags set with 'sci-fi':")
print(tags)

# f. Remove the tag novel
tags.remove("novel")
print("\nUpdated tags set after removing 'novel':")
print(tags)
